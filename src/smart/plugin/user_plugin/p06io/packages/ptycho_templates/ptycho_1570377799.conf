options =
{
	max_iterations = 100;

	// update strength of object (default: 1.0)
	alpha = 1.0;
	// update strength of illumination (default: 1.0)
	beta = 1.0;
	// appended for update function to avoid singularities (default: 0.002)
	regu = 0.002;

	// order of diffraction pattern in each iteration
	// 0 = sequential, 4 = random (default: 4)
	iteration_mode = 4;
	// seed to initialize random number generation
	// leave it to 0 to use a random seed (default: 0)
	seed = 0;

	// momentum update a la Maiden et al (2017)
	momentum = 
	{
		// number of subiterations between momentum updates
		steps = -1; // (only used if positive)
		// number of parallel updates between momentum updates
		parallel_steps = 5;
		object_update = 0.9; // between 0 and 1
		illumination_update = 0.9; // between 0 and 1
	};

	// false: round positions to full pixel
	// true: take full positions (~3 times slower)
	subpixelshift = false;

	illumination =
	{
		refine = true;  // (default: true)
	};

	object =
	{
		update = true;

		// directly reconstruct delta and beta
		refractive_index_object = false;

		// constrain object
		// 0 NON
		// 1 Amplitude
		// 2 Phase
		// 3 both
		constrain = 3;
		constraints = //if constrain = true
		{
			// apply constrain on each subiteration
			subiterations = false;

			amplitude =
			{
				min = 0.0;
				max = 1.0;

				// pull back strength to amplitude interval
				//   1   : fully clip
				// 0<x<1 : retract with smaller spring constant
				//   0   : no retraction of amplitude, better turn of amplitude constrain
				fac = 1.0;
			};
			phase =
			{
				min = -3.1415;//rad
				max = 0.0;//rad

				// pull back strength to phase interval
				//   1   : fully clip
				// 0<x<1 : retract with smaller spring constant
				//   0   : no retraction of amplitude, better turn of phase constrain
				fac = 1.0;

				// before constrain the phase try to unwrap it
				// 0 : no unwrapping
				// 1 : search in horizontal lines
				// 2 : search in vertical lines
				// 3 : search in horizontal and vertical lines
				// 4 : search in vertical and horizontal lines
				// 5 : do a global gradient FFT based unwrapping
				//     enlarge object to avoid unwrap errors at the object frame
				//     upper 10 pixel rows used to set phase back to background,
				//IF this is NOT AIR/EMPTY -> DO NOT USE THIS UNWRAPPING
				unwrap_mode = 0;
				// if doit = [1,2,3]
				// fraction of 2*pi to detect a phase jump, if >1 no jump will be detected!
				unwrap_fraction = 1.5;
			};

			// changes factor with iteration
			// 0 : factor of pull back strength is as set
			// 1 : factor is rising with iteration [0->1]
			// 2 : factor is decrease with iteration [1->0]
			// 3 : factor going up: log(i)/log(max_i), (0->1)
			// 4 : factor going up: 1-1/(x+1), (0->1)
			// 5 : factor going up: 1-5/(x+5), (0->1)
			// 6 : factor going up: 1-0.5/(x+0.5), (0->1)
			// 7 : constrain factor going up with sqrt(i/max_i), (0->1)
			adapt_fac = 0;

			// change amp/phase of object to 1/0 under condition
			area21 =
			{
				// Working but may destroy object
				// divide object by maximum amplitude value of object to get 1 in maximum
				max_to_1 = false;

				// set average of amplitude & Phase to 1 & 0
				// add amplitude to 1 and phase to 0
				avg_to_1 = false;

				// mask to define area of object to average, priority use
				file = "";

				// area to average, used if NO mask is set
				x0 = -1;
				x1 = -1;
				y0 = -1;
				y1 = -1;
			};
		};
	};
};

output =
{
	folder = "rec/";
	//0 for saving only last, 1 for saving all
	save_modulo = 1;
	always_respect_format_selection = false;  // respect pgm/edf/tiff selection for first/final iterations

	illumination =
	{
		pgm = false;
		real_imag = false; //edf
		phase_amplitude = true; //tiff
	};
	object =
	{
		pgm = false;
		real_imag = false; //edf
		phase_amplitude = true; //tiff

		// representation of the object overlayed by the positions
		// original positions are blue
		// new positions red
		// the connection is green
		// positions without changes purple
		position_map = false;//tiff
		// background of the position display
		//	0: black
		//	1: amplitude
		//	2: phase
		position_map_background = 2;

		// unwrap the output phases
		// before constrain the phase try to unwrap it
		// 0 : no unwrapping
		// 1 : search in vertical lines
		// 2 : search in horizontal lines
		// 3 : search in horizontal and vertical lines
		// 4 : search in vertical and horizontal lines
		// 5 : do a global gradient FFT based unwrapping
		//     enlarge object to avoid unwrap errors at the object frame
		//     upper 10 pixel rows used to set phase back to background, 		//IF this is NOT AIR/EMPTY -> DO NOT USE THIS UNWRAPPING
		unwrap_mode = 0;
		// if doit = [1,2,3]
		// fraction of 2*pi to detect a phase jump, if >1 no jump will be detected!
		unwrap_fraction = 1;

		//calculate statistics of the object, the abs and phase will be handled not re and im
		average = true;
		//if stDev is set to true average is forced true, the average is ignored
		stDev = true;
		//if start is negative the last X images are taken into account for statistics and stop is ignored
		start = -50;
		stop  = 0;

		// true  : print equidistant reconstruction steps
		// false : return first N images and then leaving out some
		real_movie = true;
	};
	far_field_pattern =
	{
		// average of the last iteration far-field pattern
		// the patterns are averaged before intensity update
		average = false;
		stDev = false;

		// if the iteration number is >= 1,
		// n iteration are averaged
		iterations = 0;
	};
};

input =
{
	pixelsize =
	{
		photon_energy = 15.25;//keV
		pixelsize_detector = 0.172;//mm
		distance_sample_detector = 2000.0;//mm
	};

	illumination =
	{
		// 0 : read from file
		// 1 : round (sharp) illumination(init problematic with hot pixels or beamstop)
		// 2 : gaussian illumination (init problematic with hot pixels or beamstop)
		mode = 2;

		file = //if mode = 0
		{
			filename_1 = "illumination_re.bin";
			filename_2 = "illumination_im.bin";

			// define the image content
			//   0 the images are 1...real      2...imaginary
			//   1 the images are 1...amplitude 2...phase
			//   2 the images are 1...intensity 2...phase
			file_type = 0;

			// factor to scale illumination intensity
			// (adapt to intensity of other acquisition time)
			scalefactor = 1;
		};

		round = // if mode = 1
		{
			diameter = 100e-6;//mm
		};

		gaussian = // if mode = 2
		{
			FWHMx = 100e-6;//mm
			FWHMy = 100e-6;//mm
		};

		restrict =
		{
			// 0: no restriction
			// 1: restricted to disk with diameter
			// 2: set the outer frame(one pixel wide) to 0
			// 3: scale illumination to dosis
			// 4: like 3 but before each subiteration
			// 5: like 4 but scale to the brightest diffraction pattern 
			restrict_in_size = 0;

			// restrict_in_size==1: if value in mm is larger than illumination field the assumed unit is pixel!
			// restrict_in_size==(3||4): value gives dosis per scanpoint
			value = 0.01; //mm or photons

			// not used if set 0
			// constrain amplitude to nyquist-square[1/4n?:3/4n?), range:[0,1]
			// keeps L2norm, flattens outer part
			ratio = 0.0;
		};

		// distance of pixel to bend the optical axis away from the center of diffraction pattern
		// energy and distance to detector is needed
		beam_stear_x = 0;//px
		beam_stear_y = 0;//px


		curved_wavefront_radius = 0;//mm
    };

	object =
	{
		//0 = read from file
		//1 = initialize
		mode = 1;

		file = //if mode = 0
		{
			filename_1 = "object_re.bin";
			filename_2 = "object_im.bin";

			// define the image content
			//   0 the images are 1...real      2...imaginary
			//   1 the images are 1...amplitude 2...phase
			//   2 the images are 1...intensity 2...phase
			file_type = 0;
		};
	};

	diffraction_patterns =
	{
		filename_base = "diff/ccd_";
		//1: 1D numbering spec like
		//2: 2D scans like prefixXXXX_YYYYsufix
		//3: 3D scans like prefixXXXX_YYYY_ZZZZsufix
		dim_of_numbering = 2;

		//always used!
		number_of_digits = 4;
		start = 0;
		stop = 10;
		step = 1;

		//only used if dim_of_numbering = 2 or 3
		number_of_digits_second = 4;
		start_second = 0;
		stop_second = 10;
		step_second = 1;
		number_seperator = "_";

		//only used if dim_of_numbering = 3
		number_of_digits_slice = 4;
		start_slice = 0;
		stop_slice = 10;
		step_slice = 1;

		//how to handle three dimension scans
		//0: no multi slices
		//1: average
		//2: reconstruct at same point
		//3: enlarge object to have filed per slice
		multiple_image_handle = 2;

		filename_extension = ".edf";

		// far-field patterns will be changed in the following manner
		// 0 = no (standard Pilatus)
		// 1 = mirrorvertically
		// 2 = mirrorhorizontally (standard MAXIPIX)
		// 3 = transpose
		// 4 = rotate 180 degree
		// 5 = rotate 90 degree left
		// 6 = rotate 90 degree right
		// 7 = transpose antidiagonal
		change_orientation = 0;

		// after orientation change, the corner with the number corresponding to
		// the chosen manner will be the upper-left corner:
		//  _______________   _______________
		// |0      ___    5| |2    ___      3|
		// |    __/o  \    | |    /  o\__    |
		// |   /__     \   | |   /     __\   |
		// |      \/\/\/   | |   \/\/\/      |
		// |6_____________4| |7_____________1|

		flatfield_correction = false;
		flatfield_filename = "flatfield.bin";//if flatfield_correction = true

		//If 'false' missing diffraction patterns will be ignored,
		//otherwise you can file the new filename or ignore!
		//WARNING If used in non interactive mode, set to FALSE!
		use_missing_pattern = false;

		//Maximum memory used for diffraction patterns,
		//if negative, then minimum amount that is not used from available memory,
		//if free to use, enter zero
		memory_to_use = 0; // MB

		// If the GPU memory is not sufficient, the host RAM can be used as base storage.
		// The diffraction patterns will be stored in the host RAM and copied to the GPU
		// each time it is used. This causes memory traffic and therefore a performance reduction.
		// If the host RAM is not sufficient too, a swap option ('HD') is available. If selected
		// the diffraction patterns are written to the temporary folder and read each time used. At
		// the end of the reconstruction all swap files are deleted. Be aware of a bigger
		// performance reduction.
		// Only use this option if it is really necessary!
		// available options: DEVICE, RAM, HD 
		storage = "DEVICE";
		// only if 'HD' is selected
		temporary_folder = "./tmp";
		// maximum device memory to store diffraction patterns
		DRAM_size = 0; // [MB]
		// maximum host memory to store diffraction patterns
		HRAM_size = 0; // [MB]

		//normalize measured diffraction patterns relative to the mean pattern intensity
		norm =
		{
			norm_use = false;
			norm_filename = "norm.txt";
			norm_column = 1;
		};

		crop =
		{
			//doit:
			// 0 -> do not crop
			// 1 -> frame
			//      x0-x1,y0-y2
			// 2 -> corner & dimension
			//      x0&dimx, y1&dimy
			// 3 -> center & dimension
			//      x0&dimx, y0&dimy
			//      dim must be even(gerade)
			doit = 0;

			x0 = 64;
			y0 = 64;

			//only use square fields with size in order 2^x
			dimx = 128;
			dimy = 128;

			write_crops = false;
			// folder for croped diffraction patterns
			crop_output_folder = "diff_crop";
			crop_keep_names = false;
			stop_after_read_in = false;
		};

		write_processed_images = false;
		// folder for processed diffraction patterns
		processed_image_folder = "diff_pro";
		processed_keep_names = false;
		stop_after_read_in = false;

		offsetTable =
		{
			// 0 = read from file
			// 1 = create
			// 2 = parse from acctr scan file
			offsettabletype = 0;

			// if tabletype 0 or 2, multiply all positions by scale
			positions_scale = 1.0;

			file = //if type == 0
			{
				//give position file with x and y in columns 0 and 1
				name = "positions.txt";
			};

			create = //if type == 1
			{
				dimx = 0.002;//mm
				dimy = 0.002;//mm
				numStepsX = 100;
				numStepsY = 100;
				//x-(0) or y-axis(1) fast scanning axis?
				fast_scanning_axis = 0;
				change_scan_direction_x = false;
				change_scan_direction_y = false;
				snake = false;
			};
		};

		beamstop =
		{
			// 0 = read from file
			// 1 = create
			// 2 = multi file
			// if you like to have no beamstop file mode 1 and radius 0.0
			// value is >  0.5            : abs_val is set from diff. pattern for this pixel
			//          <= 0.5 && >= -0.5 : setmaskzero is used for this pixel
			//          <- 0.5            : abs_val is set to 0 for this pixel
			mode = 1;

			// value to fill areas outside the beamstop (if cropping enlarge the field)
			fill_outside = 0; //OPTIONAL

			// if true pixels in beamstop in range [-0.5, 0.5] set to 0
			// if false those pixels are left free
			// only used if beamstop mode is not 2
			setmaskzero = false;

			file = // ifmode = 0
			{
				name = "beamstop.bin";
			};

			create = // ifmode = 1
			{
				radius = 0.0;//px
			};

			multi = // ifmode = 2
			{
				//0 = sequential, 1 = alternating applying of beamstops
				mode = 1;

				// array of beamstop items
				// single item = ("filename", update illumination flag, setmaskzero)
				// the update illumination flag defined earlier is ignored
				// the setmaskzero flag in area extras is ignored
				items =
				(
					// beamstop name, ill update flag, setmaskzero
					("beamstop1.bin", true, false),
					("beamstop2.bin", false, false)
				);
			};
		};
	};
};

extras =// all this is OPTIONAL and may change without notice or backward compatibility
{
	pos_refine =
	{
		// !!! average object turn of position correction in these iterations

		// 4 do brut-force method (tomo-like)
		// 2 do it with gradient method by Guizar-Sicairos & Fienup (only FFT propagator)
		// 1 only error value is calculated
		// 0 do not
		// is not done before iteration start_pos_refine
		// and is stopped when average starts
		do_pos_refinement = 0;

		// obsolete, better use epsilon
		// factor between gradient and position steps
		// clip gradients < scale to ZERO
		scale = 10;

		// maximum jump with per step
		maxjw = 1;//px

		// first and last iteration of position refinement
		start_pos_refine = 50;
		stop_pos_refine = -1;

		// refinement steps
		pos_refine_steps = 3;//iterations

		// number of the patter set as fixed point
		fixed_pattern = -1;

		// pixel frame to enlarge object field
		// warning: always used, independent of do_pos_ref
		// if negative, it is ignored
		object_enlarge = 10;//px

		// gradient parameter
		gamma = 1.0;
		delta = 0.001;

		// minimum relative improvement
		epsilon = 10;//%

		// only used if brute-force method (do_pos_refinement=4)
		// write error maps per refinement step
		write_error_maps = false;
		// if selected the positions, errors etc. per iteration into a file per diffraction pattern
		// If a large number of diffraction patterns is used, deactivate to get around file count
		// errors of the file system.
		// Maps are only written if files are saved.
		write_poschange_files = false;
	};

	// move illumination and object center of intensity to center of the illumination field
	// 0: no, 1,2,3...: minimum distance in pixel to move
	move_to_center = 0;//px

	// divide each pixel in diffraction pattern into us_factr*us_factr subpixel
	// illumination will be enlarged by the same factor
	// enter positive integer; factor=1 is standard case, nothing special done
	upscale_factor = 1; // possible values: 1,2,3,...

	// list of used diff patterns [posx posy fn]
	// if empty normal input is in use --optional
	list = "";

	scan_file = // used if list is not empty
	{
		// if -1 column is not used
		// crop center cx0 && cy0 only for diffraction pattern
		// index contains the offset for hdf5 multipattern files, only separated by comma
		// start_col defines the column of the first iteration the pattern will be used
		// data_step defines valid-data line step in list file(use the n-th line)
		posx_col = 0;
		posy_col = 1;
		norm_col = -1;
		fn_col = 3;
		bst_item_col = -1;
		cx0_col = -1;
		cy0_col = -1;
		index_col = -1;
		start_col = -1;
		data_step = 1;
	};

	// size of frame that will be set to values designated
	// if assigned to zero nothing will be done at this edge
	// size of frame is pixels from corresponding edge
	frame = 
	{
		use_frame = false;

		frame_phase = 0.;//rad
		frame_amplitude = 1.;

		frame_left = 0;//px
		frame_right = 0;//px
		frame_up = 0;//px
		frame_down = 0;//px
	};

	background = 
	{
		// background correction type
		// 0: NON
		// 1: only calculation, no usage
		// 2: calculate per iteration and use for next iteration
		// 3: calculation from scratch and use next iteration
		// 4: on the fly background update and usage
		type = 0;

		// first iteration of background update
		start_iteration = 1;

		// last iteration of background update
		// negative value indicate open end update
		update_stop = -1;

		// type of background update strength
		// 1: 1. / number of diff patterns
		// 2: 1. / number of beamstop using patterns
		// 3: 1.
		// 4: user set value
		update_strength = 2;

		// value of update strength if update_strength = 4
		update_strength_value = 0.0001;

		// 0: init empty
		// 1: load from file
		init_mode = 0;

		file = "0500_background.tif";

		// if position correction is used, should background update halt?
		halt_while_position_correction = true;

		// base value for background
		bg_base = 0;

		// the background will not get updated during first iteration
		first_fix = false;
	};

	// propagator type
	// 1 : FFT
	// 2 : Fresnel FFT only
	// 3 : Fresnel (using convolution, set distance_sample_focus for cone beam)
	propagator_type = 1;

	// if Fresnel propagation (type=3) used for Fresnel scaling theorem 
	distance_sample_focus = 0;

	// update type
	parallel_update = 
	{
		// true : parallel update is used (difference map algorithm)
		do_parallel_update = false;

		// iteration to start with parallel update
		parallel_update_start = 0;
		parallel_update_stop  = -1; // negativ numbers: max_iterations - stop number, -1 is last

		// true : first iteration only changes illumination in difference map style
		// side condition : (need do_parallel_update = true)
		parallel_update_first = false;
	};

	update_strategy = 
	{
		// true : ePIE algorithm as proposed by Maiden & Rodenburg
		// false: sequential update as implemented by A.Schropp
		do_super_update = true;
		// true : quick ePIE with modified illumination norm
		do_super_sequential = false;

		// use dosis normalized update
		use_dosis = false;
		// start iteration of dosis normalization
		dosis_start = 1;
	};

	// statistical model for replace of absolute values
	// 1 : euclid
	// 2 : gaussian, update strengths must be negative!
	// 3 : poisson
	// 4 : special  0->0
	// 5 : special, 0=free
	// 6 : (0.75*|PSI| +0.25*I)/S
	// 7 : I<50->8; I>50->2
	// 8 : I=0 -> 0.05*PSI; I!=0 -> 1
	// 9 : I=0 -> 0.05*PSI; I!=0 -> 2
	statistical_model = 1;

	intensity_factors =
	{
		doit = false;
		// intensity factor per diffraction pattern
		// only used if a single illumination is used
		start = -1;
		stop = -1;
		step = 1;

		// linear update strength of new intensity factor (0,1]
		strength = 1.0;
	};

	multi_ill =
	{
		// if false only one illumination is used
		doit = false;

		items =
		(
			// first illumination always normally initialized
			// type: 0 = renew from old start point
			//       1 = empty
			//       2 = copy and move by (x,y)=(v1,v2)
			//       3 = copy and use as multibeam, move by (x,y)=(v1,v2)
			//       4 = gauss mode x/y = v1/v2
			// (start, factor, type, height, v1, v2)
			(0, 1, 0, 1, 0, 0),
			(0, 1, 0, 1, 0, 0)
		);
	};

	// Provides reconstructing of several slices instead of a single object.
	// Warning: these settings are for testing purpose only! They might change without notice
	multi_slicing =
	{
		// If multi slicing is used, some other options might not work (parallel_update, superupdate)
		// Please check your output carefully!
		use_multi_slicing = false;

		default = 
		{
			parent = "";
			
			update_strength = 1.0;
			first_iteration = 0;
			propagator = "fft"; // or fresnel or fresnel_fft
			refractive_index = 1.0;
			input = {}; // or { real="real.tif"; imag="imag.tif"; }; or amplitude & phase or intensity & phase

			amplitude_constraints = [0.0, 1.0, 0.0]; // [min, max, pullback strength] or empty []
			phase_constraints = [-3.1415, 3.1416, 0.0]; // [min, max, pullback strength] or empty []
			strength_adjustment_mode = 0; // defines how pullback strength acts//

			frame_phase = 0.0; //
			frame_amplitude = 1.0; //
			frame_mask = [0, 0, 0, 0]; // [left, right, up, down] or empty []

			area_maximum_to_1 = false; //
			area_average_to_1 = false; //
			area_to_1_mask_rect = [-1, -1, -1, -1]; // [x0, x1, y0, y1] or empty []
			area_to_1_mask_file = "";

			unwrap_mode = 0; // 0 = none, 1 = h, 2 = v, 3 = hv, 4=vh, 5 = fft (h = horizontal, v=vertical)
			unwrap_fraction = 1.5; // use for mode = 1|2|3
		};

		inherit_example = 
		{
			parent = "default";
			
			first_iteration = 100;
			update_strength = 0.8;
		};

		// The first listed slice corresponds to the slice next to the illumination, the last one
		// to the slice next to the detector. The far field propagation has to be the last entry
		// If there is no distance for the far field propagation, the distance of 
		// 'input.pixelsize.distance_sample_detector' will be used.

		object_list =
		(
			{ distance = 1; parent = "inherit_example"; },
			{ propagator="fft"; parent = "default"; }
		);
	};

	cushin_correction =
	{
		// correct the cushin deformation
		use_cushin_correction = false;

		// tilts of the detector perpendicular to the optical axis
		detector_vertical_tilt = 0;
		detector_horizontal_tilt = 0;
		// rotation of the detector around the optical axis
		detector_inbeamrotation = 0;

		//normalize the greyscale relativ to real propagation distance
		renormalize_greyscale = false;
		// if normalize the image may have darkfield offset
		offset = 0;
};
};
display =
{
	// Display images in case of usage of CImg.h
	// Only available if compiled with CImg option
	// CTRL-C with an activated window will kill ptycho!
	// CTRL-Z with an activated window will stop ptycho!
	// ESC will cause the close of the Window at next write
	use_display = false;

	//show fields if included in writing the output
	obj_color = false; // show color map of object like pgm
	obj_amp = false;// show amplitude map
	obj_pha = false;// show phase map
	obj_re = false;// show real value map
	obj_im = false;// show imaginary value map

	ill_color = false; // show color map of illumination
	ill_amp = false;// show amplitude map
	ill_pha = false;// show phase map
	ill_re = false;// show real value map
	ill_im = false;// show imaginary value map

	// display background if used
	background = false;

	// display dosis if used
	// show 2 fields, alternating the iterations
	dosis = false;
	
	// wait for user to close all display windows
	wait_to_close = false;

	// display positions
	// purple are unchanged positions
	// blue are the start positions
	// red are the current positions
	// green line mark the current displacement vector
	display_positions = false;
	// background of the position display
	//	0: black
	//	1: amplitude
	//	2: phase
	position_background = 0;

	// if error calculation is done
	// a map with dots per positions is shown
	// the brightness of the point codes
	// the error value
	// min max is given
	display_error = false;

	// display global error value as graph
	display_error_graph = false;

	// display every n'th iteration
	// display extra to the saved iterations
	// zero means nothing extra will be display
	// medium performance reduction
	display_iterations = 1;

	// display all sub-iterations
	// WARNING: extreme performance reduction
	display_subiterations = false;

	// display the read in and cropped diffraction patterns
	display_patterns = false;
	// time to sleep after display new pattern
	// time in mili seconds
	display_pattern_sleep = 500;
};

//VERBOSITY [0-9]
//      0 : standard output
//      1 : extended output
// 2 to 9 : debug output
VERBOSITY = 0;

// display iteration progress
//    "no": don't display at any time
//  "auto": during long iterations (>=2s) a progress status is on display
//   "yes": always display the iteration progress
//
SHOW_ITERATION_PROGRESS = "auto";


// Timestamp to check if config file is up to date
// Do not change! This describes the last change of the config file.
// Last change: Sun Oct  6 18:03:19 2019 CEST
// using ptycho-version: develop [3a3e85a] (Release)
TIMESTAMP = 1570377799;
